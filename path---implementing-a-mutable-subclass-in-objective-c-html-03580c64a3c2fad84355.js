webpackJsonp([0x90827f866b0f],{413:function(e,n){e.exports={data:{markdownRemark:{html:"<p>I'm writing a class in <a href=\"http://adamstegman.com/projects/git-push.html\">Git Push</a> to hold and fetch git blobs from\n<a href=\"http://developer.github.com/v3/git/blobs/\">Github</a>.</p>\n<pre><code>@interface GHBlob : NSObject &#x3C;NSCopying, NSMutableCopying>\n@property (nonatomic, copy, readonly) NSData *content;\n...\n@end\n\n@implementation GHBlob\n@synthesize content = _content;\n...\n@end\n</code></pre>\n<p>To support creating and updating blobs, I wrote a mutable subclass initialized\nin #mutableCopy from <a href=\"http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Protocols/NSMutableCopying_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSMutableCopying\">NSMutableCopying</a>. This entailed\nredefining properties as <code>readwrite</code>:</p>\n<pre><code>@interface GHMutableBlob : GHBlob\n@property (nonatomic, copy, readwrite) NSData *content;\n...\n@end\n\n@implementation GHMutableBlob\n@synthesize content = _content;\n...\n@end\n</code></pre>\n<h3>Problems</h3>\n<h4>Resynthesizing</h4>\n<p>As shown above, I also re-synthesized the methods in the subclass. However,\nthis resulted in the subclass's initializer breaking.</p>\n<pre><code>GHBlob *newBlob = [blob mutableCopy];\nSTAssertEquals(newBlob.content, blob.content, nil);\n  //=> '&#x3C;00000000>' should be equal to '&#x3C;10cbb806>'\n</code></pre>\n<p>On review, I noticed something I'd missed before in\n<a href=\"http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocProperties.html\">Apple's documentation on redeclaring properties</a>. The redeclared\nproperty isn't synthesized in their example, it's declared <code>@dynamic</code> and the\nsetter is defined by hand. I scoffed at the inconvenience (isn't this what\nsynthesizing is supposed to avoid?), but did it anyway.</p>\n<h4>Unreachable instance variables</h4>\n<p>Next, the compiler complained that the <code>_content</code> instance variable was\nunreachable. Oh,\n<a href=\"http://stackoverflow.com/questions/5015130/do-properties-have-to-be-declared-as-instance-variables-in-objective-c#answer-5015657\">so <em>this</em> is why we define ivars in the interface</a> - it makes\nthem available to subclasses.</p>\n<h3>Summary</h3>\n<p>So to implement <code>NSMutableCopying</code>, I had to explicitly declare my instance\nvariables in the interface and explicitly define setter methods in my mutable\nsubclass. I thought the property/synthesize syntax was\n<a href=\"http://mobile.dzone.com/news/open-letter-apple-please-kill\">saving me the trouble</a>, but apparently it's not all rainbows and\nunicorns.</p>\n<pre><code>@interface GHBlob : NSObject &#x3C;NSCopying, NSMutableCopying> {\n  NSData *_content;\n}\n@property (nonatomic, copy, readonly) NSData *content;\n...\n@end\n\n@implementation GHBlob\n@synthesize content = _content;\n@end\n</code></pre>\n<p>And in the mutable subclass:</p>\n<pre><code>@interface GHMutableBlob : GHBlob\n@property (nonatomic, copy, readwrite) NSData *content;\n...\n@end\n\n@implementation GHMutableBlob\n@dynamic content;\n- (void)setContent:(NSData *)content {\n  _content = [content copy];\n}\n</code></pre>",fields:{post:{title:"Implementing a Mutable Subclass in Objective-C",link:null,timestamp:"2012-01-06T06:31Z",date:"January 6, 2012 6:31am UTC"}}}},pathContext:{slug:"/implementing-a-mutable-subclass-in-objective-c.html"}}}});
//# sourceMappingURL=path---implementing-a-mutable-subclass-in-objective-c-html-03580c64a3c2fad84355.js.map