{"version":3,"sources":["webpack:///path---activerecord-hangs-on-to-destroyed-relations-d3002d4fed1cce19ac2b.js","webpack:///./.cache/json/activerecord-hangs-on-to-destroyed-relations.json"],"names":["webpackJsonp","404","module","exports","data","markdownRemark","html","fields","post","title","link","timestamp","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,80KAA4yGC,QAAotEC,MAAQC,MAAA,+CAAAC,KAAA,KAAAC,UAAA,oBAAAC,KAAA,kCAA2IC,aAAgBC,KAAA","file":"path---activerecord-hangs-on-to-destroyed-relations-d3002d4fed1cce19ac2b.js","sourcesContent":["webpackJsonp([247780549830431],{\n\n/***/ 404:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Rails' ActiveRecord has a nifty <code>#destroy</code> method that almost everyone already knows about. The documentation for <code>#destroy</code><sup id=\\\"fnref-1\\\"><a href=\\\"#fn-1\\\" class=\\\"footnote-ref\\\">1</a></sup> helpfully states</p>\\n<blockquote>\\n<p>Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they\\ncan’t be persisted).</p>\\n</blockquote>\\n<p>What is less clear is how it works when you call it on a relationship. To be sure, it destroyed the database record. What it also unfortunately does it hangs on to the reference in the parent object.</p>\\n<p>Let's throw down with some sample code.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Thing</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  has_one <span class=\\\"token symbol\\\">:child</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Child</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  belongs_to <span class=\\\"token symbol\\\">:thing</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nzengarden<span class=\\\"token operator\\\">></span> thing <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Thing</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span>\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Thing id: nil, name: nil, created_at: nil, updated_at: nil></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>save\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">true</span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>create_child <span class=\\\"token symbol\\\">:name</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">\\\"Child\\\"</span>\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1,...></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>child\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1...></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>child<span class=\\\"token punctuation\\\">.</span>destroy\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1...></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>child\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1...></span>\\n</code></pre>\\n      </div>\\n<p>Arg. I just destroyed it! I don't want it hanging around in my cache. If I really wanted to save it, I should have saved it before or during the destroy call. I can of course invalidate my cache by calling</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code>thing<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">child</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>which correctly returns nil. But if I don't know to do that immediately after the destroy, I get errors like</p>\\n<blockquote>\\n<p>TypeError: can't modify frozen hash</p>\\n</blockquote>\\n<p>because code used later naïvely calls</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">if</span> thing<span class=\\\"token punctuation\\\">.</span>child\\n  thing<span class=\\\"token punctuation\\\">.</span>child<span class=\\\"token punctuation\\\">.</span>attributes <span class=\\\"token operator\\\">=</span> new_attributes\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>expecting that if a child exists, it should be updated.</p>\\n<p>For the sake of argument, let's say that maybe the behavior isn't so bad, maybe this is what people expect or could use. In that case, what a terrible error message. I'm not familiar enough with the Associations internals to suggest where a better one could be injected, but something along the lines of</p>\\n<blockquote>\\n<p>Can't modify a destroyed record</p>\\n</blockquote>\\n<p>would be miles better.</p>\\n<div class=\\\"footnotes\\\">\\n<hr>\\n<ol>\\n<li id=\\\"fn-1\\\">\\n<p>Rails 3 - <a href=\\\"http://railsapi.com/doc/rails-v3.0.0/classes/ActiveRecord/Persistence.html#M001019\\\">http://railsapi.com/doc/rails-v3.0.0/classes/ActiveRecord/Persistence.html#M001019</a>\\nRails 2.3.8 - <a href=\\\"http://railsapi.com/doc/rails-v2.3.8/classes/ActiveRecord/Base.html#M001111\\\">http://railsapi.com/doc/rails-v2.3.8/classes/ActiveRecord/Base.html#M001111</a></p>\\n<a href=\\\"#fnref-1\\\" class=\\\"footnote-backref\\\">↩</a>\\n</li>\\n</ol>\\n</div>\",\"fields\":{\"post\":{\"title\":\"ActiveRecord Hangs On to Destroyed Relations\",\"link\":null,\"timestamp\":\"2010-10-25T18:31Z\",\"date\":\"October 25, 2010 6:31pm UTC\"}}}},\"pathContext\":{\"slug\":\"/activerecord-hangs-on-to-destroyed-relations\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---activerecord-hangs-on-to-destroyed-relations-d3002d4fed1cce19ac2b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Rails' ActiveRecord has a nifty <code>#destroy</code> method that almost everyone already knows about. The documentation for <code>#destroy</code><sup id=\\\"fnref-1\\\"><a href=\\\"#fn-1\\\" class=\\\"footnote-ref\\\">1</a></sup> helpfully states</p>\\n<blockquote>\\n<p>Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they\\ncan’t be persisted).</p>\\n</blockquote>\\n<p>What is less clear is how it works when you call it on a relationship. To be sure, it destroyed the database record. What it also unfortunately does it hangs on to the reference in the parent object.</p>\\n<p>Let's throw down with some sample code.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Thing</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  has_one <span class=\\\"token symbol\\\">:child</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Child</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Base</span>\\n  belongs_to <span class=\\\"token symbol\\\">:thing</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nzengarden<span class=\\\"token operator\\\">></span> thing <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Thing</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span>\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Thing id: nil, name: nil, created_at: nil, updated_at: nil></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>save\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">true</span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>create_child <span class=\\\"token symbol\\\">:name</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">\\\"Child\\\"</span>\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1,...></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>child\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1...></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>child<span class=\\\"token punctuation\\\">.</span>destroy\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1...></span>\\nzengarden<span class=\\\"token operator\\\">></span> thing<span class=\\\"token punctuation\\\">.</span>child\\n<span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">#&lt;Child id: 4, name: \\\"Child\\\", thing_id: 1...></span>\\n</code></pre>\\n      </div>\\n<p>Arg. I just destroyed it! I don't want it hanging around in my cache. If I really wanted to save it, I should have saved it before or during the destroy call. I can of course invalidate my cache by calling</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code>thing<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">child</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>which correctly returns nil. But if I don't know to do that immediately after the destroy, I get errors like</p>\\n<blockquote>\\n<p>TypeError: can't modify frozen hash</p>\\n</blockquote>\\n<p>because code used later naïvely calls</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">if</span> thing<span class=\\\"token punctuation\\\">.</span>child\\n  thing<span class=\\\"token punctuation\\\">.</span>child<span class=\\\"token punctuation\\\">.</span>attributes <span class=\\\"token operator\\\">=</span> new_attributes\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>expecting that if a child exists, it should be updated.</p>\\n<p>For the sake of argument, let's say that maybe the behavior isn't so bad, maybe this is what people expect or could use. In that case, what a terrible error message. I'm not familiar enough with the Associations internals to suggest where a better one could be injected, but something along the lines of</p>\\n<blockquote>\\n<p>Can't modify a destroyed record</p>\\n</blockquote>\\n<p>would be miles better.</p>\\n<div class=\\\"footnotes\\\">\\n<hr>\\n<ol>\\n<li id=\\\"fn-1\\\">\\n<p>Rails 3 - <a href=\\\"http://railsapi.com/doc/rails-v3.0.0/classes/ActiveRecord/Persistence.html#M001019\\\">http://railsapi.com/doc/rails-v3.0.0/classes/ActiveRecord/Persistence.html#M001019</a>\\nRails 2.3.8 - <a href=\\\"http://railsapi.com/doc/rails-v2.3.8/classes/ActiveRecord/Base.html#M001111\\\">http://railsapi.com/doc/rails-v2.3.8/classes/ActiveRecord/Base.html#M001111</a></p>\\n<a href=\\\"#fnref-1\\\" class=\\\"footnote-backref\\\">↩</a>\\n</li>\\n</ol>\\n</div>\",\"fields\":{\"post\":{\"title\":\"ActiveRecord Hangs On to Destroyed Relations\",\"link\":null,\"timestamp\":\"2010-10-25T18:31Z\",\"date\":\"October 25, 2010 6:31pm UTC\"}}}},\"pathContext\":{\"slug\":\"/activerecord-hangs-on-to-destroyed-relations\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/activerecord-hangs-on-to-destroyed-relations.json\n// module id = 404\n// module chunks = 247780549830431"],"sourceRoot":""}