webpackJsonp([0xe6246ec661f7],{421:function(e,n){e.exports={data:{markdownRemark:{html:'<p>I created an <a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/ApplicationKit/Classes/NSTokenField_Class/Reference/Reference.html">NSTokenField</a> and everything worked great with strings as tokens.\nWhen I created a representative class to use instead, I ended up with an error message and a blank token field.</p>\n<div class="gatsby-highlight">\n      <pre class="language-objectivec"><code><span class="token operator">&lt;</span>NSTokenFieldCell<span class="token punctuation">:</span> <span class="token number">0x6080003c97e0</span><span class="token operator">></span><span class="token punctuation">:</span> Failed to query display string <span class="token keyword">for</span> a represented object <span class="token operator">&lt;</span>HMCPhotoTag<span class="token punctuation">:</span> <span class="token number">0x608000422460</span><span class="token operator">></span><span class="token punctuation">.</span> Ignoring<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre>\n      </div>\n<p>Turns out, I just set the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSControl_Class/Reference/Reference.html#//apple_ref/occ/instm/NSControl/objectValue"><code>objectValue</code></a> before I set the delegate.\nSetting the delegate first meant the token field could transform my objects correctly.</p>',fields:{post:{title:"NSTokenField failed to query display string for a represented object",link:null,timestamp:"2013-12-02T01:19Z",date:"December 2, 2013 1:19am UTC"}}}},pathContext:{slug:"/nstokenfield-failed-to-query-display-string-for-a-represented-object"}}}});
//# sourceMappingURL=path---nstokenfield-failed-to-query-display-string-for-a-represented-object-7ac59468c7aafb13487b.js.map