{"version":3,"sources":["webpack:///path---complex-associations-with-factory-girl-html-1d12599e4fa539d2f504.js","webpack:///./.cache/json/complex-associations-with-factory-girl-html.json"],"names":["webpackJsonp","406","module","exports","data","markdownRemark","html","fields","post","title","link","publishedAtTimestamp","publishedAt","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,k4BAAAC,QAAu5BC,MAAQC,MAAA,yCAAAC,KAAA,KAAAC,qBAAA,KAAAC,YAAA,SAA+GC,aAAgBC,KAAA","file":"path---complex-associations-with-factory-girl-html-1d12599e4fa539d2f504.js","sourcesContent":["webpackJsonp([270410747347978],{\n\n/***/ 406:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><a href=\\\"http://github.com/thoughtbot/factory_girl\\\"><code>factory_girl</code></a> is great for DRYing up test code and making tests isolated and maintainable. What it's not so great at is any <a href=\\\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html\\\">association</a> more complicated than <code>has_one</code>/<code>belongs_to</code>. I found <a href=\\\"http://stackoverflow.com/questions/2937326/populating-an-association-with-children-in-factory-girl\\\">a nice trick on Stack Overflow</a> for <code>has_many</code> associations.</p>\\n<blockquote>\\n<p>The Factory.after_ hooks appear to be the only way to do this successfully.</p>\\n</blockquote>\\n<p>It's a shame, because it makes it really painful to use factories. What used to be a one-line call to create whatever you need becomes writing your own factories that call <code>factory_girl</code> factories.</p>\",\"fields\":{\"post\":{\"title\":\"Complex Associations with factory_girl\",\"link\":null,\"publishedAtTimestamp\":null,\"publishedAt\":null}}}},\"pathContext\":{\"slug\":\"/complex-associations-with-factory-girl.html\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---complex-associations-with-factory-girl-html-1d12599e4fa539d2f504.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><a href=\\\"http://github.com/thoughtbot/factory_girl\\\"><code>factory_girl</code></a> is great for DRYing up test code and making tests isolated and maintainable. What it's not so great at is any <a href=\\\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html\\\">association</a> more complicated than <code>has_one</code>/<code>belongs_to</code>. I found <a href=\\\"http://stackoverflow.com/questions/2937326/populating-an-association-with-children-in-factory-girl\\\">a nice trick on Stack Overflow</a> for <code>has_many</code> associations.</p>\\n<blockquote>\\n<p>The Factory.after_ hooks appear to be the only way to do this successfully.</p>\\n</blockquote>\\n<p>It's a shame, because it makes it really painful to use factories. What used to be a one-line call to create whatever you need becomes writing your own factories that call <code>factory_girl</code> factories.</p>\",\"fields\":{\"post\":{\"title\":\"Complex Associations with factory_girl\",\"link\":null,\"publishedAtTimestamp\":null,\"publishedAt\":null}}}},\"pathContext\":{\"slug\":\"/complex-associations-with-factory-girl.html\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/complex-associations-with-factory-girl-html.json\n// module id = 406\n// module chunks = 270410747347978"],"sourceRoot":""}